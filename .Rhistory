assay_data
assay_data <- segmentations$`46102_Assay1`
assay_data
segmentations$`46102_Assay1`
source("~/Voltron code/zarrrr.R", echo=TRUE)
as.SpatialData_1(xenium_data, assay='Xenium')
as.SpatialData_1(xenium_data,file='zarr_try1.zarr', assay='Xenium')
source("~/Voltron code/zarrrr.R", echo=TRUE)
as.SpatialData_1(xenium_data,file='zarr_try1.zarr', assay='Xenium')
source("~/Voltron code/zarrrr.R", echo=TRUE)
as.SpatialData_1(xenium_data,file='zarr_try1.zarr', assay='Xenium')
source("~/Voltron code/zarrrr.R", echo=TRUE)
as.SpatialData_1(xenium_data,file='zarr_try1.zarr', assay='Xenium')
source("C:/Users/rrai/VoltRon_dev_exp/R/conversion.R", echo=TRUE)
as.SpatialData_1(xenium_data,file='zarr_try1.zarr', assay='Xenium')
source("~/Voltron code/zarrrr.R", echo=TRUE)
source("~/Voltron code/zarrrr.R", echo=TRUE)
as.SpatialData_1(xenium_data,file='zarr_try1.zarr', assay='Xenium')
####
# SpatialData (Zarr) ####
####
#' as.SpatialData_1
#'
#' Converting a VoltRon object into a SpatialData (.zarr) object
#'
#' @param object a VoltRon object
#' @param assay assay name (exp: Assay1) or assay class (exp: Visium, Xenium), see \link{SampleMetadata}.
#' if NULL, the default assay will be used, see \link{vrMainAssay}.
#' @param file the name of the h5ad file
#' @param type the spatial data type of Seurat object: "image" or "spatial"
#' @param flip_coordinates if TRUE, the spatial coordinates (including segments) will be flipped
#'
#' @rdname as.SpatialData_1
#'
#' @importFrom stringr str_extract
#'
#' @export
#'
as.SpatialData_1 <- function(object, file, assay = NULL, type = c("image", "spatial"), flip_coordinates = FALSE){
# check if the file has a .zarr extension
if (tools::file_ext(file) != "zarr") {
stop("The file name must have a .zarr extension")
}
# check Seurat package
if(!requireNamespace('anndata'))
stop("Please install anndata package")
# check the number of assays
if(is.null(assay)){
if(length(unique(SampleMetadata(object)[["Assay"]])) > 1){
stop("You can only convert a single VoltRon assay into a Seurat object!")
} else {
assay <- SampleMetadata(object)[["Assay"]]
}
} else {
vrMainAssay(object) <- assay
}
# check the number of assays
if(unique(vrAssayTypes(object, assay = assay)) %in% c("spot","ROI")) {
stop("Conversion of Spot or ROI assays into Seurat is not permitted!")
}
# data
data <- vrData(object, assay = assay, norm = FALSE)
# metadata
metadata <- Metadata(object, assay = assay)
metadata$AssayID <- stringr::str_extract(rownames(metadata), "_Assay[0-9]+$")
# flip coordinates
if(flip_coordinates){
object <- flipCoordinates(object, assay = assay)
}
# coordinates
coords <- vrCoordinates(object, assay = assay)
# create anndata
adata <- anndata::AnnData(X = t(data), obs = metadata, obsm = list(spatial = coords, spatial_AssayID = coords))
# create anndata file
anndata::write_h5ad(adata, store = file)
# return
NULL
}
as.SpatialData_1(xenium_data,file='zarr_try1.zarr', assay='Xenium')
####
# SpatialData (Zarr) ####
####
#' as.SpatialData_1
#'
#' Converting a VoltRon object into a SpatialData (.zarr) object
#'
#' @param object a VoltRon object
#' @param assay assay name (exp: Assay1) or assay class (exp: Visium, Xenium), see \link{SampleMetadata}.
#' if NULL, the default assay will be used, see \link{vrMainAssay}.
#' @param file the name of the h5ad file
#' @param type the spatial data type of Seurat object: "image" or "spatial"
#' @param flip_coordinates if TRUE, the spatial coordinates (including segments) will be flipped
#'
#' @rdname as.SpatialData_1
#'
#' @importFrom stringr str_extract
#'
#' @export
#'
as.SpatialData_1 <- function(object, file, assay = NULL, type = c("image", "spatial"), flip_coordinates = FALSE){
# check if the file has a .zarr extension
if (tools::file_ext(file) != "zarr") {
stop("The file name must have a .zarr extension")
}
# check Seurat package
if(!requireNamespace('anndata'))
stop("Please install anndata package")
# check the number of assays
if(is.null(assay)){
if(length(unique(SampleMetadata(object)[["Assay"]])) > 1){
stop("You can only convert a single VoltRon assay into a Seurat object!")
} else {
assay <- SampleMetadata(object)[["Assay"]]
}
} else {
vrMainAssay(object) <- assay
}
# check the number of assays
if(unique(vrAssayTypes(object, assay = assay)) %in% c("spot","ROI")) {
stop("Conversion of Spot or ROI assays into Seurat is not permitted!")
}
# data
data <- vrData(object, assay = assay, norm = FALSE)
# metadata
metadata <- Metadata(object, assay = assay)
metadata$AssayID <- stringr::str_extract(rownames(metadata), "_Assay[0-9]+$")
# flip coordinates
if(flip_coordinates){
object <- flipCoordinates(object, assay = assay)
}
# coordinates
coords <- vrCoordinates(object, assay = assay)
# create anndata
adata <- anndata::AnnData(X = t(data), obs = metadata, obsm = list(spatial = coords, spatial_AssayID = coords))
# create anndata file
anndata::write_h5ad(adata, filename =  = file)
####
# SpatialData (Zarr) ####
####
#' as.SpatialData_1
#'
#' Converting a VoltRon object into a SpatialData (.zarr) object
#'
#' @param object a VoltRon object
#' @param assay assay name (exp: Assay1) or assay class (exp: Visium, Xenium), see \link{SampleMetadata}.
#' if NULL, the default assay will be used, see \link{vrMainAssay}.
#' @param file the name of the h5ad file
#' @param type the spatial data type of Seurat object: "image" or "spatial"
#' @param flip_coordinates if TRUE, the spatial coordinates (including segments) will be flipped
#'
#' @rdname as.SpatialData_1
#'
#' @importFrom stringr str_extract
#'
#' @export
#'
as.SpatialData_1 <- function(object, file, assay = NULL, type = c("image", "spatial"), flip_coordinates = FALSE){
# check if the file has a .zarr extension
if (tools::file_ext(file) != "zarr") {
stop("The file name must have a .zarr extension")
}
# check Seurat package
if(!requireNamespace('anndata'))
stop("Please install anndata package")
# check the number of assays
if(is.null(assay)){
if(length(unique(SampleMetadata(object)[["Assay"]])) > 1){
stop("You can only convert a single VoltRon assay into a Seurat object!")
} else {
assay <- SampleMetadata(object)[["Assay"]]
}
} else {
vrMainAssay(object) <- assay
}
# check the number of assays
if(unique(vrAssayTypes(object, assay = assay)) %in% c("spot","ROI")) {
stop("Conversion of Spot or ROI assays into Seurat is not permitted!")
}
# data
data <- vrData(object, assay = assay, norm = FALSE)
# metadata
metadata <- Metadata(object, assay = assay)
metadata$AssayID <- stringr::str_extract(rownames(metadata), "_Assay[0-9]+$")
# flip coordinates
if(flip_coordinates){
object <- flipCoordinates(object, assay = assay)
}
# coordinates
coords <- vrCoordinates(object, assay = assay)
# create anndata
adata <- anndata::AnnData(X = t(data), obs = metadata, obsm = list(spatial = coords, spatial_AssayID = coords))
# create anndata file
anndata::write_h5ad(adata, filename =  file)
# return
NULL
}
as.SpatialData_1(xenium_data,file='zarr_try1.zarr', assay='Xenium')
source("~/Voltron code/zarrrr.R", echo=TRUE)
as.SpatialData_1(xenium_data,file='zarr_try1.zarr', assay='Xenium')
source("~/Voltron code/zarrrr.R", echo=TRUE)
as.SpatialData_1(xenium_data,file='zarr_try1.zarr', assay='Xenium')
source("~/Voltron code/zarrrr.R", echo=TRUE)
as.SpatialData_1(xenium_data,file='zarr_try1.h5ad', assay='Xenium')
source("~/Voltron code/zarrrr.R", echo=TRUE)
as.SpatialData_1(xenium_data,file='zarr_try1.h5ad', assay='Xenium')
source("~/Voltron code/zarrrr.R", echo=TRUE)
as.SpatialData_1(xenium_data,file='zarr_try1.h5ad', assay='Xenium')
as.SpatialData_1(xenium_data,file='zarr_try1.zarr', assay='Xenium')
source("~/Voltron code/zarrrr.R", echo=TRUE)
as.SpatialData_1(xenium_data,file='zarr_try1.zarr', assay='Xenium')
source("~/Voltron code/zarrrr.R", echo=TRUE)
as.SpatialData_1(xenium_data,file='zarr_try1.zarr', assay='Xenium')
source("~/Voltron code/zarrrr.R", echo=TRUE)
as.SpatialData_1(xenium_data,file='zarr_try2.zarr', assay='Xenium')
####
# SpatialData (Zarr) ####
####
#' as.SpatialData_1
#'
#' Converting a VoltRon object into a SpatialData (.zarr) object
#'
#' @param object a VoltRon object
#' @param assay assay name (exp: Assay1) or assay class (exp: Visium, Xenium), see \link{SampleMetadata}.
#' if NULL, the default assay will be used, see \link{vrMainAssay}.
#' @param file the name of the h5ad file
#' @param type the spatial data type of Seurat object: "image" or "spatial"
#' @param flip_coordinates if TRUE, the spatial coordinates (including segments) will be flipped
#'
#' @rdname as.SpatialData_1
#'
#' @importFrom stringr str_extract
#' @importFrom reticulate import py_run_string
#' @importFrom tools file_path_sans_ext
#'
#' @export
#'
as.SpatialData_1 <- function(object, file, assay = NULL, type = c("image", "spatial"), flip_coordinates = FALSE){
# check Seurat package
if(!requireNamespace('anndata'))
stop("Please install anndata package")
# check the number of assays
if(is.null(assay)){
if(length(unique(SampleMetadata(object)[["Assay"]])) > 1){
stop("You can only convert a single VoltRon assay into a Seurat object!")
} else {
assay <- SampleMetadata(object)[["Assay"]]
}
} else {
vrMainAssay(object) <- assay
}
# check the number of assays
if(unique(vrAssayTypes(object, assay = assay)) %in% c("spot","ROI")) {
stop("Conversion of Spot or ROI assays into Seurat is not permitted!")
}
# data
data <- vrData(object, assay = assay, norm = FALSE)
# metadata
metadata <- Metadata(object, assay = assay)
metadata$AssayID <- stringr::str_extract(rownames(metadata), "_Assay[0-9]+$")
# flip coordinates
if(flip_coordinates){
object <- flipCoordinates(object, assay = assay)
}
# coordinates
coords <- vrCoordinates(object, assay = assay)
# create anndata
adata <- anndata::AnnData(X = t(data), obs = metadata, obsm = list(spatial = coords, spatial_AssayID = coords))
# create anndata file
anndata::write_h5ad(adata, filename =  file)
file_name_without_ext <- file_path_sans_ext(file)
# Use reticulate to convert the H5AD file to Zarr format
reticulate::py_run_string(sprintf("
import anndata as ad
adata = ad.read_h5ad('%s')
adata.write_zarr('%s')
", file, paste0(file_name_without_ext, ".zarr")))
# return
NULL
}
as.SpatialData_1(xenium_data,file='zarr_try2.zarr', assay='Xenium')
library(tools)
file_name_without_ext1 <- file_path_sans_ext('examplke.txt')
as.SpatialData_1(xenium_data,file='zarr_try2.zarr', assay='Xenium')
source("~/Voltron code/zarrrr.R", echo=TRUE)
source("~/Voltron code/zarrrr.R", echo=TRUE)
as.SpatialData_1(xenium_data,file='zarr_try2.zarr', assay='Xenium')
source("~/Voltron code/zarrrr.R", echo=TRUE)
as.SpatialData_1(xenium_data,file='zarr_try2.zarr', assay='Xenium')
source("~/Voltron code/zarrrr.R", echo=TRUE)
source("~/Voltron code/zarrrr.R", echo=TRUE)
source("~/Voltron code/zarrrr.R", echo=TRUE)
as.SpatialData_1(xenium_data,file='zarr_try2.', assay='Xenium')
debug(as.SpatialData_1)
as.SpatialData_1(xenium_data,file='zarr_try2.', assay='Xenium')
####
# SpatialData (Zarr) ####
####
#' as.SpatialData_1
#'
#' Converting a VoltRon object into a SpatialData (.zarr) object
#'
#' @param object a VoltRon object
#' @param assay assay name (exp: Assay1) or assay class (exp: Visium, Xenium), see \link{SampleMetadata}.
#' if NULL, the default assay will be used, see \link{vrMainAssay}.
#' @param file the name of the h5ad file
#' @param type the spatial data type of Seurat object: "image" or "spatial"
#' @param flip_coordinates if TRUE, the spatial coordinates (including segments) will be flipped
#'
#' @rdname as.SpatialData_1
#'
#' @importFrom stringr str_extract
#' @importFrom reticulate import py_run_string
#' @importFrom tools file_path_sans_ext
#'
#' @export
#'
as.SpatialData_1 <- function(object, file, assay = NULL, type = c("image", "spatial"), flip_coordinates = FALSE){
# check Seurat package
if(!requireNamespace('anndata'))
stop("Please install anndata package")
# check the number of assays
if(is.null(assay)){
if(length(unique(SampleMetadata(object)[["Assay"]])) > 1){
stop("You can only convert a single VoltRon assay into a Seurat object!")
} else {
assay <- SampleMetadata(object)[["Assay"]]
}
} else {
vrMainAssay(object) <- assay
}
# check the number of assays
if(unique(vrAssayTypes(object, assay = assay)) %in% c("spot","ROI")) {
stop("Conversion of Spot or ROI assays into Seurat is not permitted!")
}
# data
data <- vrData(object, assay = assay, norm = FALSE)
# metadata
metadata <- Metadata(object, assay = assay)
metadata$AssayID <- stringr::str_extract(rownames(metadata), "_Assay[0-9]+$")
# flip coordinates
if(flip_coordinates){
object <- flipCoordinates(object, assay = assay)
}
# coordinates
coords <- vrCoordinates(object, assay = assay)
# create anndata
adata <- anndata::AnnData(X = t(data), obs = metadata, obsm = list(spatial = coords, spatial_AssayID = coords))
# create anndata file
file_name_without_ext <- file_path_sans_ext(file)
h5ad_file <-  paste0(file_name_without_ext, ".h5ad"
anndata::write_h5ad(adata, filename = h5ad_file)
source("~/Voltron code/zarrrr.R", echo=TRUE)
as.SpatialData_1(xenium_data,file='zarr_try2.', assay='Xenium')
as.SpatialData_1(xenium_data,file='zarr_try2', assay='Xenium')
as.SpatialData_1(xenium_data,file='zarr_try2.zarr', assay='Xenium')
as.SpatialData_1(xenium_data,file='zarr_try2.', assay='Xenium')
as.SpatialData_1(xenium_data,file='zarr_try2.h5ad', assay='Xenium')
source("~/Voltron code/zarrrr.R", echo=TRUE)
as.SpatialData_1(xenium_data,file='zarr_try2', assay='Xenium')
as.SpatialData_1(xenium_data,file='zarr_try2.zarr', assay='Xenium')
as.SpatialData_1(xenium_data,file='zarr_try3.zarr', assay='Xenium')
as.SpatialData_1(xenium_data,file='zarr_test/zarr_files.zarr', assay='Xenium')
as.SpatialData_1(xenium_data,file='zarr\zarr_files.zarr', assay='Xenium')
as.SpatialData_1(xenium_data,file='zarr_files.zarr', assay='Xenium')
source("~/Voltron code/zarrrr.R", echo=TRUE)
as.SpatialData_1(xenium_data,file='zarr_files.zarr', assay='Xenium')
as.SpatialData_1(xenium_data,file='zarr_test.zarr', assay='Xenium')
remove.packages(VoltRon)
remove.packages(VoltRon)
remove.packages("VoltRon")
package_name <- "VoltRon"
if (package_name %in% rownames(installed.packages())) {
message(package_name, " is installed.")
} else {
message(package_name, " is not installed.")
}
package_name <- "Seurat"
if (package_name %in% rownames(installed.packages())) {
message(package_name, " is installed.")
} else {
message(package_name, " is not installed.")
}
install.packages("VoltRon")
install.packages("VoltRon")
devtools::install_github("BIMSBbioinfo/VoltRon")
library(VoltRon)
as.AnnData
remove.packages("VoltRon")
library(reticulate)
use_condaenv("scverse", required = T)
# geo pandas
pd <- import("pandas")
gpd <- import("geopandas")
np <- import("numpy")
pdb <- import("pdb")
shapely.geometry <- import("shapely.geometry")
py_run_string("from spatialdata.transformations.transformations import Affine, Identity, Scale")
library(reticulate)
use_condaenv("scverse", required = T)
# geo pandas
pd <- import("pandas")
gpd <- import("geopandas")
np <- import("numpy")
pdb <- import("pdb")
shapely.geometry <- import("shapely.geometry")
py_run_string("from spatialdata.transformations.transformations import Affine, Identity, Scale")
library(reticulate)
use_condaenv("scverse", required = T)
# geo pandas
pd <- import("pandas")
gpd <- import("geopandas")
np <- import("numpy")
pdb <- import("pdb")
shapely.geometry <- import("shapely.geometry")
py_run_string("from spatialdata.transformations.transformations import Affine, Identity, Scale")
# image
dask_image <- import("dask_image.imread")
dask_array <- import("dask.array")
spatialdata_models <- import("spatialdata.models")
spatialdata <- import("spatialdata")
# get python work for r object
e <- new.env()
options("reticulate.engine.environment" = e)
# get coordinates
coords <- vrCoordinates(xenium_data)
library(VoltRon)
# get python work for r object
e <- new.env()
options("reticulate.engine.environment" = e)
# get coordinates
coords <- vrCoordinates(xenium_data)
# get point wkt definition
geometry <- apply(coords, 1, function(dat){
shapely.geometry$Point(dat)
})
names(geometry) <- NULL
py_point_df <- reticulate::r_to_py(geometry)
py_radius_df <- data.frame(radius = rep(0.5, length(geometry)))
# get points as ShapesModel
assign("tmppointname", py_point_df, envir = e)
assign("tmpradiusname", py_radius_df, envir = e)
py_run_string("gdf_point = r.gpd.GeoDataFrame(data = r.tmpradiusname, geometry = r.tmppointname)")
point_spatialdata <- py_run_string("shape_point = r.spatialdata_models.ShapesModel.parse(gdf_point, transformations={'global': Identity()})", convert = FALSE)
# get segment data
# sgt <- read.csv("data/example_segments.csv")
# sgt <- read.csv("data/all_segments.csv")
sgt <- vrSegments(xenium_data)
# get polygon wkt definition
geometry <- sapply(sgt, function(dat){
shapely.geometry$Polygon(dat[,c("x", "y")])
})
names(geometry) <- NULL
py_polygon_df <- reticulate::r_to_py(geometry)
# get polygons as ShapesModel
assign("tmppolygonname", py_polygon_df, envir = e)
py_run_string("gdf_poly = r.gpd.GeoDataFrame(geometry = r.tmppolygonname)")
poly_spatialdata <- py_run_string("shape_poly = r.spatialdata_models.ShapesModel.parse(gdf_poly, transformations={'global': Identity()})", convert = FALSE)
# shape_spatialdata <- r_to_py(list(main_point = point_spatialdata$gdf_point, main_shape = poly_spatialdata$gdf_poly))
shape_spatialdata <- r_to_py(list(main_shape = poly_spatialdata$gdf_poly))
# get image
img <- vrImages(xenium_data)
# magick::image_write(img, path = "data/image.png", format = "png")
# read img from python directly
# img_py_raster <- dask_image$imread("data/image.png")
# read img as dask array
img_raster <- magick::image_raster(img, tidy = FALSE)
img_raster_array <- array(0,c(1,nrow(img_raster),ncol(img_raster)))
img_raster_array[1,,] <- img_raster
img_py_raster_array <- reticulate::r_to_py(img_raster_array)
img_py_raster_array <- dask_array$from_array(img_py_raster_array, chunks = img_py_raster_array$shape)
# get image as image2dmodel
img_spatialdata <- spatialdata_models$Image2DModel$parse(data = img_py_raster_array, dims=c("c", "y", "x"))
img_spatialdata <- r_to_py(list(main_img = img_spatialdata))
# coordinates
coords <- vrCoordinates(xenium_data)
# metadata
metadata <- Metadata(xenium_data)
# data
datax <- vrData(xenium_data, norm = FALSE)
# create anndata
metadata$cell_id <- rownames(metadata)
metadata$clusters <- as.character(metadata$clusters)
metadata$region <- "main_point"
adata <- anndata::AnnData(X = t(datax), obs = metadata, obsm = list(spatial = coords),
uns = list(spatialdata_attrs = list(region = "main_point", region_key = "region", instance_key = "cell_id")))
adata <- reticulate::r_to_py(adata)
spt_temp <- spatialdata$SpatialData(images = img_spatialdata, table = adata, shapes = shape_spatialdata)
reticulate::repl_python()
r.spt_temp.images
r.spt_temp.pl.render_shapes()
# r.spt_temp.write("data/example2.zarr")
quit
# get segment data
# sgt <- read.csv("data/example_segments.csv")
# sgt <- read.csv("data/all_segments.csv")
sgt <- vrSegments(xenium_data)
sgt_df <- data.frame(cell_id = names(sgt))
sgt_df <- reticulate::r_to_py(sgt_df)
# get polygon wkt definition
geometry <- sapply(sgt, function(dat){
shapely.geometry$Polygon(dat[,c("x", "y")])$wkt
})
# names(geometry) <- NULL
geometry <- np$array(geometry)
geometry <- reticulate::r_to_py(geometry)
geometry <- gpd$GeoSeries$from_wkt(geometry)
View(img_spatialdata)
setwd("C:/Users/rrai/futsal_app")
shiny::runApp()
runApp()
stopApp()
runApp()
